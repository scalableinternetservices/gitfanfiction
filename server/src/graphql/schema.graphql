# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User
  fandoms: [Fandom!]!
  fandom (fandomId: Int!): Fandom
  posts:[Post!]!
  post (postID: Int!): Post
  surveys: [Survey!]!
  survey (surveyId: Int!): Survey
}

type Mutation {
  addFandom (input: FandomInput!): Fandom

  makePost (input: PostInput!): Post
  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey
}

type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  password: String! #Store the hash equivalent of the password.
  name: String!
}

type Fandom {
  id: Int!
  fandomType: String!
  name: String!
  author: String!
  length: String! # comma-separated list of values denoting length of chapters in the book, or minutes in the film.
}

input FandomInput {
  fandomType: String!
  name: String!
  author: String!
  length: String! # comma-separated list of values denoting length of chapters in the book, or minutes in the film.
}

type Originstory{
  id: Int!
  length:[Int!]!
  type: String!
}

input PostInput {

  origin: Int!
  start: String!
  length: String!
  title: String!
  body: String!
}


type Post {

  id: Int!
  origin: Int!
  start: String!
  length: String!
  upvote: Int!
  title: String!
  body: String!
}

type Comment {
  id: Int!
  body: String!
  timestamp: String! #DateTime not supported. proabably require some special library install
  user: User!
}

enum UserType { ADMIN, USER }

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

